# MediaPipe graph that performs hands tracking on desktop with TensorFlow
# Lite on CPU.
# Used in the example in
# mediapipe/examples/desktop/hand_tracking:hand_tracking_cpu.

# CPU image. (ImageFrame)
input_stream: "input_video"

# Config for logging landmarks to csv.
input_stream: "capture_mode"

# CPU image. (ImageFrame)
output_stream: "output_video"

# Generates side packet cotaining max number of hands to detect/track.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:num_hands"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 2 }
    }
  }
}

# Detects/tracks hand landmarks.
node {
  calculator: "HandLandmarkTrackingCpu"
  input_stream: "IMAGE:input_video"
  input_side_packet: "NUM_HANDS:num_hands"
  output_stream: "LANDMARKS:landmarks"
  output_stream: "HANDEDNESS:handedness"
  output_stream: "HAND_ROIS_FROM_LANDMARKS:multi_hand_rects"
}

# Save landmarks to csv on relevant key-press
node {
  calculator: "LandmarksToCsvCalculator"
  input_stream: "NORM_LANDMARKS:landmarks"
  input_stream: "HANDEDNESS:handedness"
  input_stream: "CAPTURE_MODE:capture_mode"
}

# Run model inference to classify landmarks as gestures
node {
  calculator: "PtClassificationInferenceCalculator"
  input_stream: "NORM_LANDMARKS:landmarks"
  input_stream: "HANDEDNESS:handedness"
  output_stream: "GESTURE:gesture"
}

# Subgraph that renders annotations and overlays them on top of the input
# images (see hand_renderer_cpu.pbtxt).
node {
  calculator: "OverlayRendererSubgraph"
  input_stream: "IMAGE:input_video"
  input_stream: "LANDMARKS:landmarks"
  input_stream: "HANDEDNESS:handedness"
  input_stream: "GESTURE:gesture"
  input_stream: "NORM_RECTS:multi_hand_rects"
  output_stream: "IMAGE:output_video"
}

node {
  calculator: "HandMovementToMouseCalculator"
  input_stream: "NORM_LANDMARKS:landmarks"
  input_stream: "HANDEDNESS:handedness"
  input_stream: "GESTURE:gesture"
  input_stream: "PREV_LANDMARK_XY:prev_landmark_xy"
  output_stream: "LANDMARK_XY:landmark_xy"
}

node {
  calculator: "PreviousLoopbackCalculator"
  input_stream: "MAIN:landmarks"
  input_stream: "LOOP:landmark_xy"
  input_stream_info: { 
    tag_index: 'LOOP' 
    back_edge: true
  }
  output_stream: "PREV_LOOP:prev_landmark_xy"
}
